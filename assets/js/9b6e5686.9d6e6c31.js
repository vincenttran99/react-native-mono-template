"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[498],{6272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ui-components/forms","title":"Forms","description":"Forms are a common feature of any application. This section shows you how to handle forms the right way with this React Native template using react-hook-form and custom form components.","source":"@site/docs/ui-components/forms.md","sourceDirName":"ui-components","slug":"/ui-components/forms","permalink":"/react-native-mono-template/docs/ui-components/forms","draft":false,"unlisted":false,"editUrl":"https://github.com/vincenttran99/react-native-mono-template/edit/main/docs/docs/ui-components/forms.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docs","previous":{"title":"Global Components","permalink":"/react-native-mono-template/docs/ui-components/global-components"},"next":{"title":"Performance","permalink":"/react-native-mono-template/docs/category/performance"}}');var r=t(4848),o=t(8453);const i={sidebar_position:5},l="Forms",a={},c=[{value:"React Hook Form Integration",id:"react-hook-form-integration",level:2},{value:"Form Components Overview",id:"form-components-overview",level:2},{value:"Basic Form Setup",id:"basic-form-setup",level:2},{value:"Components",id:"components",level:2},{value:"FTextInput Component",id:"ftextinput-component",level:3},{value:"FTextInputBottomSheet Component",id:"ftextinputbottomsheet-component",level:3},{value:"FSelectSingle Component",id:"fselectsingle-component",level:3},{value:"FSelectChip Component",id:"fselectchip-component",level:3},{value:"FSwitch Component",id:"fswitch-component",level:3},{value:"Form Validation",id:"form-validation",level:2},{value:"Error Handling and Display",id:"error-handling-and-display",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"forms",children:"Forms"})}),"\n",(0,r.jsxs)(n.p,{children:["Forms are a common feature of any application. This section shows you how to handle forms the right way with this React Native template using ",(0,r.jsx)(n.code,{children:"react-hook-form"})," and custom form components."]}),"\n",(0,r.jsx)(n.h2,{id:"react-hook-form-integration",children:"React Hook Form Integration"}),"\n",(0,r.jsxs)(n.p,{children:["This template uses ",(0,r.jsx)(n.code,{children:"react-hook-form"})," to handle forms ",(0,r.jsx)("mcreference",{link:"https://starter.obytes.com/ui-and-theme/forms/",index:"0",children:"0"}),". It is a popular library that provides a lot of features out of the box and is very easy to use and integrate with React Native."]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure to check the ",(0,r.jsx)(n.a,{href:"https://react-hook-form.com/",children:"react-hook-form documentation"})," to learn more about how to use it."]}),"\n",(0,r.jsx)(n.h2,{id:"form-components-overview",children:"Form Components Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The template provides a set of controlled components that are specifically designed to work with ",(0,r.jsx)(n.code,{children:"react-hook-form"}),". All form components are located in ",(0,r.jsx)(n.code,{children:"src/components/form/"})," and follow a consistent API pattern:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FTextInput"}),": Text input field with validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FTextInputBottomSheet"}),": Text input optimized for bottom sheet usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FSelectSingle"}),": Single selection dropdown with search functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FSelectChip"}),": Multi/single selection using chip components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FSwitch"}),": Toggle switch component"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-form-setup",children:"Basic Form Setup"}),"\n",(0,r.jsxs)(n.p,{children:["Here's how to set up a basic form using the template's form components, as demonstrated in ",(0,r.jsx)("mcfile",{name:"login.screen.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/screens/login/login.screen.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import React, { useCallback, useMemo } from "react";\nimport { SubmitHandler, useForm } from "react-hook-form";\nimport FTextInput from "@/components/form/form.textInput";\nimport BButton from "@/components/base/base.button";\nimport BView from "@/components/base/base.view";\n\ntype FormData = {\n  email: string;\n  password: string;\n};\n\nconst MyForm = () => {\n  const { control, handleSubmit } = useForm<FormData>();\n\n  const ruleInput = useMemo(\n    () => ({\n      email: {\n        required: {\n          value: true,\n          message: "Email should not be empty",\n        },\n        pattern: {\n          value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n          message: "Email is not valid",\n        },\n      },\n      password: {\n        required: {\n          value: true,\n          message: "Password should not be empty",\n        },\n      },\n    }),\n    []\n  );\n\n  const onSubmit: SubmitHandler<FormData> = useCallback(async (data) => {\n    console.log("Form data:", data);\n    // Handle form submission\n  }, []);\n\n  return (\n    <BView gap="md">\n      <FTextInput\n        name="email"\n        control={control}\n        placeholder="Your email"\n        rules={ruleInput.email}\n        leftIcon="email"\n        keyboardType="email-address"\n      />\n\n      <FTextInput\n        name="password"\n        control={control}\n        placeholder="Your password"\n        rules={ruleInput.password}\n        secureTextEntry\n        leftIcon="lock"\n      />\n\n      <BButton onPress={handleSubmit(onSubmit)} label="Submit" />\n    </BView>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,r.jsx)(n.h3,{id:"ftextinput-component",children:"FTextInput Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("mcsymbol",{name:"FTextInput",filename:"form.textInput.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/form/form.textInput.tsx",startline:"32",type:"function"})," is a controlled text input component that integrates seamlessly with ",(0,r.jsx)(n.code,{children:"react-hook-form"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Props Interface"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type FTextInputProps = BTextInputProps & {\n  control: Control<any>; // React Hook Form control\n  name: string; // Field name\n  defaultValue?: string; // Default value\n  hint?: string; // Helper text\n  containerStyle?: StyleProp<ViewStyle>; // Container styling\n  rules?: RegisterOptions; // Validation rules\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Usage Examples"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Basic text input\n<FTextInput\n  name="username"\n  control={control}\n  placeholder="Enter username"\n  rules={{\n    required: { value: true, message: "Username is required" },\n    minLength: { value: 3, message: "Minimum 3 characters" }\n  }}\n/>\n\n// Email input with validation\n<FTextInput\n  name="email"\n  control={control}\n  placeholder="Enter email"\n  keyboardType="email-address"\n  leftIcon="email"\n  rules={{\n    required: { value: true, message: "Email is required" },\n    pattern: {\n      value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n      message: "Invalid email format"\n    }\n  }}\n/>\n\n// Password input\n<FTextInput\n  name="password"\n  control={control}\n  placeholder="Enter password"\n  secureTextEntry\n  leftIcon="lock"\n  rules={{\n    required: { value: true, message: "Password is required" },\n    minLength: { value: 8, message: "Minimum 8 characters" }\n  }}\n/>\n\n// Text input with hint\n<FTextInput\n  name="description"\n  control={control}\n  placeholder="Enter description"\n  multiline\n  numberOfLines={4}\n  hint="Provide a brief description (optional)"\n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ftextinputbottomsheet-component",children:"FTextInputBottomSheet Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("mcsymbol",{name:"FTextInputBottomSheet",filename:"form.textInput.bottomSheet.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/form/form.textInput.bottomSheet.tsx",startline:"33",type:"function"})," is specifically designed for use within bottom sheet modals, handling keyboard events properly."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Usage"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import FTextInputBottomSheet from "@/components/form/form.textInput.bottomSheet";\n\n// Inside a bottom sheet modal\n<FTextInputBottomSheet\n  name="comment"\n  control={control}\n  placeholder="Add your comment"\n  multiline\n  numberOfLines={3}\n  rules={{\n    required: { value: true, message: "Comment is required" },\n  }}\n/>;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fselectsingle-component",children:"FSelectSingle Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("mcsymbol",{name:"FSelectSingle",filename:"form.select.single.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/form/form.select.single.tsx",startline:"48",type:"function"})," provides a dropdown selection with search functionality using bottom sheet modal."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Props Interface"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type FSelectSingleProps = BTextInputProps & {\n  control: Control<any>;\n  name: string;\n  defaultValue?: { value: any; label?: string };\n  hint?: string;\n  label?: string;\n  rules?: RegisterOptions;\n  search?: boolean; // Enable search functionality\n  disabled?: boolean;\n  searchPlaceHolder?: string;\n  onChangeSearchValue?: (value: string) => Promise<FSelectSingleItem[]>;\n  heightSelectBox?: string | number;\n  initData: FSelectSingleItem[]; // Options data\n  onValueChange?: (value: FSelectSingleItem) => void;\n  renderItem?: (item, currentValue, onPress) => React.JSX.Element;\n};\n\ntype FSelectSingleItem = {\n  value: any;\n  label: string;\n  [key: string]: any;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Usage Examples"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Basic select\nconst countryOptions = [\n  { value: \'us\', label: \'United States\' },\n  { value: \'uk\', label: \'United Kingdom\' },\n  { value: \'ca\', label: \'Canada\' },\n];\n\n<FSelectSingle\n  name="country"\n  control={control}\n  label="Select Country"\n  placeholder="Choose a country"\n  initData={countryOptions}\n  rules={{\n    required: { value: true, message: "Country is required" }\n  }}\n/>\n\n// Select with search\n<FSelectSingle\n  name="city"\n  control={control}\n  label="Select City"\n  placeholder="Choose a city"\n  search={true}\n  searchPlaceHolder="Search cities..."\n  initData={cityOptions}\n  heightSelectBox="60%"\n  onValueChange={(selected) => {\n    console.log(\'Selected city:\', selected);\n  }}\n/>\n\n// Select with async search\n<FSelectSingle\n  name="user"\n  control={control}\n  label="Select User"\n  placeholder="Choose a user"\n  search={true}\n  initData={userOptions}\n  onChangeSearchValue={async (searchTerm) => {\n    const response = await searchUsers(searchTerm);\n    return response.data;\n  }}\n/>\n\n// Custom item rendering\n<FSelectSingle\n  name="product"\n  control={control}\n  label="Select Product"\n  initData={productOptions}\n  renderItem={(item, currentValue, onPress) => (\n    <BPressable\n      onPress={() => onPress(item)}\n      paddingVertical="md"\n      flexDirection="row"\n      alignItems="center"\n      gap="sm"\n    >\n      <BImage source={{ uri: item.image }} width={40} height={40} />\n      <BView flex={1}>\n        <BText variant="md" fontWeight="bold">{item.label}</BText>\n        <BText variant="sm" color="secondary">{item.description}</BText>\n      </BView>\n      {currentValue?.value === item.value && (\n        <BIcon name="check" color="primary" />\n      )}\n    </BPressable>\n  )}\n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fselectchip-component",children:"FSelectChip Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("mcsymbol",{name:"FSelectChip",filename:"form.select.chip.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/form/form.select.chip.tsx",startline:"41",type:"function"})," allows selection using chip components, supporting both single and multiple selection modes."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Props Interface"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type FSelectChipProps = {\n  control: Control<any>;\n  name: string;\n  defaultValue?: FChipItem[];\n  hint?: string;\n  style?: StyleProp<ViewStyle>;\n  containerStyle?: StyleProp<ViewStyle>;\n  rules?: RegisterOptions;\n  initData: FChipItem[]; // Chip options\n  onValueChange?: (values: FChipItem[]) => void;\n  multi?: boolean; // Enable multiple selection\n  chipProps?: BChipProps; // Props for chip styling\n};\n\ntype FChipItem = {\n  value: any;\n  label: string;\n  icon?: string;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Usage Examples"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Single selection chips\nconst sizeOptions = [\n  { value: 'xs', label: 'Extra Small' },\n  { value: 's', label: 'Small' },\n  { value: 'm', label: 'Medium' },\n  { value: 'l', label: 'Large' },\n  { value: 'xl', label: 'Extra Large' },\n];\n\n<FSelectChip\n  name=\"size\"\n  control={control}\n  initData={sizeOptions}\n  multi={false}\n  hint=\"Select your preferred size\"\n  rules={{\n    required: { value: true, message: \"Size is required\" }\n  }}\n/>\n\n// Multiple selection chips\nconst interestOptions = [\n  { value: 'tech', label: 'Technology', icon: 'laptop' },\n  { value: 'sports', label: 'Sports', icon: 'football' },\n  { value: 'music', label: 'Music', icon: 'music' },\n  { value: 'travel', label: 'Travel', icon: 'airplane' },\n];\n\n<FSelectChip\n  name=\"interests\"\n  control={control}\n  initData={interestOptions}\n  multi={true}\n  chipProps={{\n    size: 'md',\n    variant: 'outline'\n  }}\n  containerStyle={{\n    flexWrap: 'wrap',\n    gap: 8\n  }}\n  onValueChange={(selected) => {\n    console.log('Selected interests:', selected);\n  }}\n/>\n\n// Custom styled chips\n<FSelectChip\n  name=\"tags\"\n  control={control}\n  initData={tagOptions}\n  multi={true}\n  chipProps={{\n    backgroundColor: 'primary',\n    labelColor: 'white',\n    selectedBackgroundColor: 'secondary',\n    borderRadius: 'full'\n  }}\n/>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fswitch-component",children:"FSwitch Component"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("mcsymbol",{name:"FSwitch",filename:"form.switch.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/form/form.switch.tsx",startline:"30",type:"function"})," provides a toggle switch for boolean values."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Props Interface"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type FSwitchProps = SwitchProps & {\n  control: Control<any>;\n  name: string;\n  defaultValue?: boolean;\n  hint?: string;\n  containerStyle?: StyleProp<ViewStyle>;\n  rules?: RegisterOptions;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Usage Examples"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Basic switch\n<FSwitch\n  name="notifications"\n  control={control}\n  defaultValue={true}\n  hint="Enable push notifications"\n/>\n\n// Switch with validation\n<FSwitch\n  name="terms"\n  control={control}\n  defaultValue={false}\n  rules={{\n    required: {\n      value: true,\n      message: "You must accept the terms and conditions"\n    }\n  }}\n  onValueChange={(value) => {\n    console.log(\'Terms accepted:\', value);\n  }}\n/>\n\n// Custom styled switch\n<BView flexDirection="row" alignItems="center" justifyContent="space-between">\n  <BView flex={1}>\n    <BText variant="md" fontWeight="bold">Dark Mode</BText>\n    <BText variant="sm" color="secondary">Switch to dark theme</BText>\n  </BView>\n  <FSwitch\n    name="darkMode"\n    control={control}\n    trackColor={{ false: \'#767577\', true: \'#81b0ff\' }}\n    thumbColor={watchDarkMode ? \'#f5dd4b\' : \'#f4f3f4\'}\n  />\n</BView>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"form-validation",children:"Form Validation"}),"\n",(0,r.jsxs)(n.p,{children:["All form components support ",(0,r.jsx)(n.code,{children:"react-hook-form"})," validation rules. Here are common validation patterns:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Common Validation Rules"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const validationRules = {\n  // Required field\n  required: {\n    value: true,\n    message: "This field is required",\n  },\n\n  // Minimum length\n  minLength: {\n    value: 3,\n    message: "Minimum 3 characters required",\n  },\n\n  // Maximum length\n  maxLength: {\n    value: 50,\n    message: "Maximum 50 characters allowed",\n  },\n\n  // Pattern matching\n  pattern: {\n    value: /^[a-zA-Z0-9]+$/,\n    message: "Only alphanumeric characters allowed",\n  },\n\n  // Custom validation\n  validate: {\n    notEmpty: (value) => value.trim() !== "" || "Field cannot be empty",\n    uniqueEmail: async (value) => {\n      const exists = await checkEmailExists(value);\n      return !exists || "Email already exists";\n    },\n  },\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Complex Validation Example"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const passwordRules = {\n  required: {\n    value: true,\n    message: "Password is required",\n  },\n  minLength: {\n    value: 8,\n    message: "Password must be at least 8 characters",\n  },\n  validate: {\n    hasUpperCase: (value) =>\n      /[A-Z]/.test(value) ||\n      "Password must contain at least one uppercase letter",\n    hasLowerCase: (value) =>\n      /[a-z]/.test(value) ||\n      "Password must contain at least one lowercase letter",\n    hasNumber: (value) =>\n      /\\d/.test(value) || "Password must contain at least one number",\n    hasSpecialChar: (value) =>\n      /[!@#$%^&*(),.?":{}|<>]/.test(value) ||\n      "Password must contain at least one special character",\n  },\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling-and-display",children:"Error Handling and Display"}),"\n",(0,r.jsx)(n.p,{children:"All form components automatically display validation errors. The error display follows this priority:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hint text"}),": Shows when no validation errors exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation errors"}),": Shows when field validation fails"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error styling"}),": Components automatically apply error styling when invalid"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Error display is automatic\n<FTextInput\n  name="email"\n  control={control}\n  placeholder="Enter email"\n  hint="We\'ll never share your email" // Shows when valid\n  rules={{\n    required: { value: true, message: "Email is required" }, // Shows when invalid\n    pattern: { value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, message: "Invalid email" },\n  }}\n/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"1. Form Structure"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"BKeyboardAvoidingView"})," for forms to handle keyboard properly"]}),"\n",(0,r.jsxs)(n.li,{children:["Group related fields using ",(0,r.jsx)(n.code,{children:"BView"})," with appropriate spacing"]}),"\n",(0,r.jsx)(n.li,{children:"Provide clear labels and placeholders"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate keyboard types for different input types"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"2. Validation"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Define validation rules in ",(0,r.jsx)(n.code,{children:"useMemo"})," to prevent unnecessary re-renders"]}),"\n",(0,r.jsx)(n.li,{children:"Use descriptive error messages"}),"\n",(0,r.jsx)(n.li,{children:"Implement client-side validation for better UX"}),"\n",(0,r.jsx)(n.li,{children:"Consider server-side validation for security"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"3. Performance"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"defaultValues"})," in ",(0,r.jsx)(n.code,{children:"useForm"})," to prevent controlled/uncontrolled warnings"]}),"\n",(0,r.jsx)(n.li,{children:"Memoize validation rules and options"}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"watch"})," sparingly to avoid unnecessary re-renders"]}),"\n",(0,r.jsxs)(n.li,{children:["Consider using ",(0,r.jsx)(n.code,{children:"useController"})," for complex custom components"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"4. Accessibility"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide meaningful labels and hints"}),"\n",(0,r.jsxs)(n.li,{children:["Use appropriate ",(0,r.jsx)(n.code,{children:"testID"})," props for testing"]}),"\n",(0,r.jsx)(n.li,{children:"Ensure proper focus management"}),"\n",(0,r.jsx)(n.li,{children:"Support screen readers with descriptive text"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"5. User Experience"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Show loading states during form submission"}),"\n",(0,r.jsx)(n.li,{children:"Provide immediate feedback for validation errors"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate input types and keyboards"}),"\n",(0,r.jsx)(n.li,{children:"Implement proper error handling and user feedback"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Example of good form practices\nconst WellStructuredForm = () => {\n  const {\n    control,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = useForm({\n    defaultValues: {\n      email: "",\n      password: "",\n      rememberMe: false,\n    },\n  });\n\n  const validationRules = useMemo(\n    () => ({\n      email: {\n        required: { value: true, message: "Email is required" },\n        pattern: {\n          value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n          message: "Please enter a valid email",\n        },\n      },\n      password: {\n        required: { value: true, message: "Password is required" },\n        minLength: {\n          value: 6,\n          message: "Password must be at least 6 characters",\n        },\n      },\n    }),\n    []\n  );\n\n  const onSubmit = useCallback(async (data) => {\n    try {\n      await submitForm(data);\n      showSuccessMessage("Form submitted successfully!");\n    } catch (error) {\n      showErrorMessage("Submission failed. Please try again.");\n    }\n  }, []);\n\n  return (\n    <BKeyboardAvoidingView flex={1} padding="lg">\n      <BView gap="md">\n        <FTextInput\n          testID="email-input"\n          name="email"\n          control={control}\n          placeholder="Enter your email"\n          keyboardType="email-address"\n          autoCapitalize="none"\n          leftIcon="email"\n          rules={validationRules.email}\n        />\n\n        <FTextInput\n          testID="password-input"\n          name="password"\n          control={control}\n          placeholder="Enter your password"\n          secureTextEntry\n          leftIcon="lock"\n          rules={validationRules.password}\n        />\n\n        <BView flexDirection="row" alignItems="center" gap="sm">\n          <FSwitch name="rememberMe" control={control} defaultValue={false} />\n          <BText>Remember me</BText>\n        </BView>\n\n        <BButton\n          testID="submit-button"\n          onPress={handleSubmit(onSubmit)}\n          label={isSubmitting ? "Submitting..." : "Submit"}\n          disabled={isSubmitting}\n          loading={isSubmitting}\n        />\n      </BView>\n    </BKeyboardAvoidingView>\n  );\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"These form components provide a robust foundation for building forms in your React Native application while maintaining consistency with the design system and providing excellent user experience."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);