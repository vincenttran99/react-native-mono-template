"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3874],{8030:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ui-components/global-components","title":"Global Components","description":"Global components are application-wide UI elements that provide consistent user interactions across the entire app. These components are typically used for system-level notifications, dialogs, loading states, and other overlay elements that need to be accessible from anywhere in the application.","source":"@site/docs/ui-components/global-components.md","sourceDirName":"ui-components","slug":"/ui-components/global-components","permalink":"/react-native-mono-template/docs/ui-components/global-components","draft":false,"unlisted":false,"editUrl":"https://github.com/vincenttran99/react-native-mono-template/edit/main/docs/docs/ui-components/global-components.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Base Components","permalink":"/react-native-mono-template/docs/ui-components/base-components"},"next":{"title":"Forms","permalink":"/react-native-mono-template/docs/ui-components/forms"}}');var t=o(4848),a=o(8453);const l={sidebar_position:4},i="Global Components",r={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"GlobalDialog Usage",id:"globaldialog-usage",level:3},{value:"GlobalBottomSheetDialog Usage",id:"globalbottomsheetdialog-usage",level:3},{value:"GlobalLoading Usage",id:"globalloading-usage",level:3},{value:"Flash Messages Usage",id:"flash-messages-usage",level:3},{value:"Integration Setup",id:"integration-setup",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"global-components",children:"Global Components"})}),"\n",(0,t.jsx)(e.p,{children:"Global components are application-wide UI elements that provide consistent user interactions across the entire app. These components are typically used for system-level notifications, dialogs, loading states, and other overlay elements that need to be accessible from anywhere in the application."}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(e.p,{children:["This template includes three main global components located in ",(0,t.jsx)(e.code,{children:"src/components/global/"})," and managed through helper functions in ",(0,t.jsx)("mcfile",{name:"global.helper.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/helpers/global.helper.tsx"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"GlobalDialog"}),": Modal dialogs for confirmations, alerts, and user interactions"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"GlobalBottomSheetDialog"}),": Bottom sheet dialogs for mobile-optimized interactions"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"GlobalLoading"}),": Application-wide loading overlay"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Flash Messages"}),": Toast notifications for user feedback"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(e.h3,{id:"globaldialog-usage",children:"GlobalDialog Usage"}),"\n",(0,t.jsxs)(e.p,{children:["The global dialog is accessed through the ",(0,t.jsx)(e.code,{children:"showDialog"})," function that accepts a ",(0,t.jsx)("mcsymbol",{name:"GlobalDialogComponentData",filename:"global.dialog.component.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/components/global/global.dialog.component.tsx",startline:"17",type:"class"})," object."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import { showDialog } from "@/helpers/global.helper";\n\nconst MyComponent = () => {\n  const handleShowConfirmDialog = () => {\n    showDialog({\n      title: "Confirm Action",\n      icon: "warning",\n      content: "Are you sure you want to proceed?",\n      dismissable: true,\n      positiveButton: {\n        label: "Confirm",\n        onPress: () => {\n          console.log("Confirmed");\n        },\n      },\n      negativeButton: {\n        label: "Cancel",\n        onPress: () => {\n          console.log("Cancelled");\n        },\n      },\n    });\n  };\n\n  return <BButton onPress={handleShowConfirmDialog} label="Show Dialog" />;\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Dialog Configuration Options"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'type GlobalDialogComponentData = {\n  title?: string; // Dialog title\n  titleProps?: BTextProps; // Custom title styling\n  icon?: string; // Icon name from icon set\n  dismissable?: boolean; // Allow backdrop dismissal\n  dismissableBackButton?: boolean; // Allow back button dismissal\n  iconProps?: Omit<BIconProps, "name">; // Custom icon styling\n  content?: React.ReactNode | string; // Main content\n  scrollContent?: React.ReactNode; // Scrollable content area\n  negativeButton?: ButtonConfig; // Cancel/No button\n  positiveButton?: ButtonConfig; // Confirm/Yes button\n  neutralButton?: ButtonConfig; // Neutral option button\n  closeButton?: boolean; // Show close button\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Advanced Dialog Examples"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// Error Dialog\nshowDialog({\n  title: "Error",\n  icon: "alert-circle",\n  iconProps: { color: "error" },\n  content: "Something went wrong. Please try again.",\n  dismissable: true,\n  positiveButton: {\n    label: "OK",\n    props: { backgroundColor: "error" },\n  },\n});\n\n// Custom Content Dialog\nshowDialog({\n  title: "Custom Content",\n  content: (\n    <BView gap="md">\n      <BText>This is custom content</BText>\n      <BTextInput placeholder="Enter your input" />\n    </BView>\n  ),\n  positiveButton: { label: "Submit" },\n  negativeButton: { label: "Cancel" },\n});\n\n// Three Button Dialog\nshowDialog({\n  title: "Choose Option",\n  content: "Select one of the following options:",\n  positiveButton: { label: "Option A" },\n  neutralButton: { label: "Option B" },\n  negativeButton: { label: "Cancel" },\n});\n'})}),"\n",(0,t.jsx)(e.h3,{id:"globalbottomsheetdialog-usage",children:"GlobalBottomSheetDialog Usage"}),"\n",(0,t.jsxs)(e.p,{children:["The bottom sheet dialog is accessed through the ",(0,t.jsx)(e.code,{children:"showBottomSheetDialog"})," function, providing a mobile-optimized dialog experience."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import { showBottomSheetDialog } from "@/helpers/global.helper";\n\nconst MyComponent = () => {\n  const handleShowBottomSheet = () => {\n    showBottomSheetDialog({\n      title: "Select Option",\n      icon: "settings",\n      content: "Choose your preferred option:",\n      enablePanDownToClose: true,\n      dismissable: "close",\n      positiveButton: {\n        label: "Option A",\n        onPress: () => console.log("Option A selected"),\n      },\n      neutralButton: {\n        label: "Option B",\n        onPress: () => console.log("Option B selected"),\n      },\n      negativeButton: {\n        label: "Cancel",\n        onPress: () => console.log("Cancelled"),\n      },\n    });\n  };\n\n  return <BButton onPress={handleShowBottomSheet} label="Show Bottom Sheet" />;\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Bottom Sheet Configuration"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'type GlobalBottomSheetDialogComponentData = {\n  title?: string; // Dialog title\n  icon?: string; // Icon name\n  iconProps?: BIconProps; // Icon styling\n  content?: React.ReactNode; // Main content\n  scrollContent?: React.ReactNode; // Scrollable content\n  negativeButton?: ButtonConfig; // Cancel button\n  positiveButton?: ButtonConfig; // Primary action button\n  neutralButton?: ButtonConfig; // Secondary action button\n  closeButton?: boolean; // Show close button\n  enablePanDownToClose?: boolean; // Enable pan gesture to close\n  dismissable?: "close" | "none"; // Backdrop behavior\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"globalloading-usage",children:"GlobalLoading Usage"}),"\n",(0,t.jsx)(e.p,{children:"The global loading overlay is controlled through simple helper functions for showing and hiding loading states."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import { showGlobalLoading, hideGlobalLoading } from "@/helpers/global.helper";\n\nconst MyComponent = () => {\n  const handleAsyncOperation = async () => {\n    // Show loading with auto-hide after 10 seconds (default)\n    showGlobalLoading(true);\n\n    try {\n      await someAsyncOperation();\n    } finally {\n      // Manually hide loading when operation completes\n      hideGlobalLoading();\n    }\n  };\n\n  const handleLongOperation = () => {\n    // Show loading without auto-hide\n    showGlobalLoading(false);\n\n    // Remember to manually hide when done\n    setTimeout(() => {\n      hideGlobalLoading();\n    }, 5000);\n  };\n\n  return (\n    <BView gap="md">\n      <BButton onPress={handleAsyncOperation} label="Async Operation" />\n      <BButton onPress={handleLongOperation} label="Long Operation" />\n    </BView>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Loading Functions"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showGlobalLoading(autoHide: boolean = true)"})}),": Shows the loading overlay","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"autoHide"}),": Whether to automatically hide after 10 seconds (default: true)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"hideGlobalLoading()"})}),": Manually hides the loading overlay"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"flash-messages-usage",children:"Flash Messages Usage"}),"\n",(0,t.jsxs)(e.p,{children:["Flash messages provide toast-style notifications for user feedback using ",(0,t.jsx)(e.code,{children:"react-native-flash-message"}),"."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import {\n  showMessage,\n  showSuccessMessage,\n  showErrorMessage,\n  showInfoMessage,\n  showWaringMessage,\n  hideMessage,\n} from "@/helpers/global.helper";\n\nconst MyComponent = () => {\n  const handleSuccess = () => {\n    showSuccessMessage("Operation completed successfully!");\n  };\n\n  const handleError = () => {\n    showErrorMessage("Something went wrong", "Please try again later");\n  };\n\n  const handleInfo = () => {\n    showInfoMessage("Information", "This is an informational message");\n  };\n\n  const handleWarning = () => {\n    showWaringMessage("Warning", "Please check your input");\n  };\n\n  const handleCustomMessage = () => {\n    showMessage({\n      message: "Custom Message",\n      description: "This is a custom styled message",\n      type: "success",\n      duration: 4000,\n      icon: "auto",\n    });\n  };\n\n  return (\n    <BView gap="md">\n      <BButton onPress={handleSuccess} label="Success Message" />\n      <BButton onPress={handleError} label="Error Message" />\n      <BButton onPress={handleInfo} label="Info Message" />\n      <BButton onPress={handleWarning} label="Warning Message" />\n      <BButton onPress={handleCustomMessage} label="Custom Message" />\n    </BView>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Message Functions"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showSuccessMessage(message: string, description?: string)"})}),": Shows success toast"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showErrorMessage(message: string, description?: string)"})}),": Shows error toast"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showInfoMessage(message: string, description?: string)"})}),": Shows info toast"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showWaringMessage(message: string, description?: string)"})}),": Shows warning toast"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"showMessage(messageOptions: MessageOptions)"})}),": Shows custom message with full options"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"hideMessage()"})}),": Manually hides current message"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"integration-setup",children:"Integration Setup"}),"\n",(0,t.jsxs)(e.p,{children:["The global components are automatically integrated in ",(0,t.jsx)("mcfile",{name:"index.tsx",path:"/Users/vincent_tran/Work/ReactNative/react-native-mono-template/src/navigation/index.tsx"})," using refs from the global helper:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'import {\n  BottomSheetDialogRef,\n  DialogRef,\n  LoadingRef,\n} from "@/helpers/global.helper";\n\nexport default function AppNavigation() {\n  return (\n    <ThemeProvider theme={themeValue}>\n      {/* Your navigation structure */}\n\n      {/* Global components with refs */}\n      <BLazy timeRender={1500} haveIndicator={false}>\n        <GlobalBottomSheetDialogComponent ref={BottomSheetDialogRef} />\n        <GlobalLoadingComponent ref={LoadingRef} />\n        <GlobalDialogComponent ref={DialogRef} />\n      </BLazy>\n\n      {/* Flash message component */}\n      <FlashMessage position={"top"} />\n    </ThemeProvider>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"1. Use Helper Functions"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Always use the helper functions instead of accessing refs directly"}),"\n",(0,t.jsx)(e.li,{children:"Helper functions provide a cleaner API and better error handling"}),"\n",(0,t.jsx)(e.li,{children:"They abstract away the complexity of ref management"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"2. Error Handling"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'const handleOperation = async () => {\n  showGlobalLoading();\n\n  try {\n    const result = await apiCall();\n    showSuccessMessage("Operation successful!");\n    return result;\n  } catch (error) {\n    showErrorMessage("Operation failed", error.message);\n  } finally {\n    hideGlobalLoading();\n  }\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"3. User Feedback"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// Provide immediate feedback for user actions\nconst handleDelete = () => {\n  showDialog({\n    title: "Confirm Delete",\n    content: "This action cannot be undone.",\n    icon: "trash",\n    iconProps: { color: "error" },\n    positiveButton: {\n      label: "Delete",\n      props: { backgroundColor: "error" },\n      onPress: async () => {\n        showGlobalLoading();\n        try {\n          await deleteItem();\n          showSuccessMessage("Item deleted successfully");\n        } catch (error) {\n          showErrorMessage("Failed to delete item");\n        } finally {\n          hideGlobalLoading();\n        }\n      },\n    },\n    negativeButton: { label: "Cancel" },\n  });\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"4. Loading States"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// Always pair loading states with operations\nconst handleSubmit = async (data) => {\n  showGlobalLoading();\n\n  try {\n    await submitForm(data);\n    showSuccessMessage("Form submitted successfully!");\n    navigation.goBack();\n  } catch (error) {\n    showErrorMessage(\n      "Submission failed",\n      "Please check your data and try again"\n    );\n  } finally {\n    hideGlobalLoading();\n  }\n};\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"5. Accessibility"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Provide meaningful titles and content for screen readers"}),"\n",(0,t.jsx)(e.li,{children:"Use appropriate button labels that describe the action"}),"\n",(0,t.jsx)(e.li,{children:"Ensure proper focus management when dialogs open/close"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"6. Performance"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Global components are lazy-loaded to improve initial app performance"}),"\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"BLazy"})," component with appropriate timing for non-critical UI elements"]}),"\n",(0,t.jsx)(e.li,{children:"Avoid showing multiple dialogs simultaneously"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>l,x:()=>i});var s=o(6540);const t={},a=s.createContext(t);function l(n){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);