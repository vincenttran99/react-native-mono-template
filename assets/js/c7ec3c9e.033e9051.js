"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6257],{4171:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"start-here/environment-variables","title":"Environment Variables and Configuration","description":"You can define environment variables in .env.development, .env.production, and .env.staging files to manage different configuration values for your application.","source":"@site/docs/start-here/environment-variables.md","sourceDirName":"start-here","slug":"/start-here/environment-variables","permalink":"/react-native-mono-template/docs/start-here/environment-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/vincenttran99/react-native-mono-template/edit/main/docs/docs/start-here/environment-variables.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docs","previous":{"title":"Project Structure","permalink":"/react-native-mono-template/docs/start-here/project-structure"},"next":{"title":"UI and Theming","permalink":"/react-native-mono-template/docs/ui-components/ui-and-theming"}}');var t=i(4848),r=i(8453);const a={sidebar_position:5},s="Environment Variables and Configuration",l={},c=[{value:"How to Use",id:"how-to-use",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Security Considerations",id:"security-considerations",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"environment-variables-and-configuration",children:"Environment Variables and Configuration"})}),"\n",(0,t.jsxs)(e.p,{children:["You can define environment variables in ",(0,t.jsx)(e.code,{children:".env.development"}),", ",(0,t.jsx)(e.code,{children:".env.production"}),", and ",(0,t.jsx)(e.code,{children:".env.staging"})," files to manage different configuration values for your application."]}),"\n",(0,t.jsx)(e.p,{children:"Each file contains separate environment variables that will be used when the application is built with the corresponding environment. Some special environment variables are only effective in the development environment and are not used in production. Detailed comments are included in the environment files."}),"\n",(0,t.jsx)(e.h2,{id:"how-to-use",children:"How to Use"}),"\n",(0,t.jsxs)(e.p,{children:["To use environment variables in your code, you can use ",(0,t.jsx)(e.code,{children:"Constants.expoConfig?.extra?.[environment variable name]"}),". For convenience and flexibility, a ",(0,t.jsx)(e.code,{children:"config.constant.ts"})," file has been created to manage the application's configuration variables. You can map environment variables to variables in this file and also declare variables that are independent of the environment."]}),"\n",(0,t.jsx)(e.p,{children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'// Use in React Native\n\nimport { Constants } from "expo-constants";\nexport const config = {\n  apiUrl: Constants.expoConfig?.extra?.API_URL,\n};\n\n// or simply use Constants.expoConfig?.extra?.API_URL directly\n'})}),"\n",(0,t.jsx)(e.p,{children:"Interestingly, you can also use these variables in native code:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-swift",children:'// Here\'s how to access them in Swift code for iOS:\nimport Foundation\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n  // ... existing code ...\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Read environment variables from Info.plist\n    if let apiUrl = Bundle.main.object(forInfoDictionaryKey: "API_URL") as? String {\n      print("API URL from environment variable: \\(apiUrl)")\n    }\n\n    if let primaryColor = Bundle.main.object(forInfoDictionaryKey: "PRIMARY_COLOR") as? String {\n      // Use primaryColor in iOS application\n      print("Primary color from environment variable: \\(primaryColor)")\n    }\n\n    // Check boolean variable\n    if let enableLogUserBugsToFirebase = Bundle.main.object(forInfoDictionaryKey: "ENABLE_LOG_USER_BUGS_TO_FIREBASE") as? Bool {\n      if enableLogUserBugsToFirebase {\n        // Enable user bug logging to Firebase\n        print("User bug logging to Firebase enabled")\n      }\n    }\n\n    // ... existing code ...\n    return true\n  }\n\n  // ... existing code ...\n}\n\n// You can also create a utility class to access environment variables:\n\nimport Foundation\n\nclass EnvConfig {\n  static let shared = EnvConfig()\n\n  var apiUrl: String {\n    return Bundle.main.object(forInfoDictionaryKey: "API_URL") as? String ?? ""\n  }\n\n  var policyUrl: String {\n    return Bundle.main.object(forInfoDictionaryKey: "POLICY_URL") as? String ?? ""\n  }\n\n  var deepLink: String {\n    return Bundle.main.object(forInfoDictionaryKey: "DEEP_LINK") as? String ?? ""\n  }\n\n  var enableLogUserBugsToFirebase: Bool {\n    return Bundle.main.object(forInfoDictionaryKey: "ENABLE_LOG_USER_BUGS_TO_FIREBASE") as? Bool ?? false\n  }\n\n  var primaryColor: String {\n    return Bundle.main.object(forInfoDictionaryKey: "PRIMARY_COLOR") as? String ?? "#000000"\n  }\n}\n\n// Use in Swift code\n// let apiUrl = EnvConfig.shared.apiUrl\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-kotlin",children:'// Here\'s how to access them in Kotlin code for Android:\nimport android.os.Bundle\nimport com.facebook.react.ReactActivity\nimport com.facebook.react.ReactActivityDelegate\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled\nimport com.facebook.react.defaults.DefaultReactActivityDelegate\nimport android.util.Log\n\nclass MainActivity : ReactActivity() {\n  // ... existing code ...\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    // Read environment variables from BuildConfig\n    val apiUrl = BuildConfig.API_URL\n    Log.d("EnvVariables", "API URL from environment variable: $apiUrl")\n\n    val primaryColor = BuildConfig.PRIMARY_COLOR\n    Log.d("EnvVariables", "Primary color from environment variable: $primaryColor")\n\n    // Check boolean variable\n    val enableLogUserBugsToFirebase = BuildConfig.ENABLE_LOG_USER_BUGS_TO_FIREBASE.toBoolean()\n    if (enableLogUserBugsToFirebase) {\n      // Enable user bug logging to Firebase\n      Log.d("EnvVariables", "User bug logging to Firebase enabled")\n    }\n  }\n\n  // ... existing code ...\n}\n\n// You can also create a utility class to access environment variables:\nobject EnvConfig {\n  val apiUrl: String\n    get() = BuildConfig.API_URL\n\n  val policyUrl: String\n    get() = BuildConfig.POLICY_URL\n\n  val deepLink: String\n    get() = BuildConfig.DEEP_LINK\n\n  val enableLogUserBugsToFirebase: Boolean\n    get() = BuildConfig.ENABLE_LOG_USER_BUGS_TO_FIREBASE.toBoolean()\n\n  val enableLogEventToFirebase: Boolean\n    get() = BuildConfig.ENABLE_LOG_EVENT_TO_FIREBASE.toBoolean()\n\n  val primaryColor: String\n    get() = BuildConfig.PRIMARY_COLOR\n}\n\n// Use in Kotlin code\n// val apiUrl = EnvConfig.apiUrl\n'})}),"\n",(0,t.jsx)(e.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(e.p,{children:["Basically, you customize the environment files according to your needs. Whenever you want to switch environments, make sure to run the ",(0,t.jsx)(e.code,{children:"prebuild"})," command (",(0,t.jsx)(e.code,{children:"prebuild:prod"})," or ",(0,t.jsx)(e.code,{children:"prebuild:stag"}),", all defined in ",(0,t.jsx)(e.code,{children:"package.json"}),") corresponding to the environment you want to use. Expo will then read the environment variables in the ",(0,t.jsx)(e.code,{children:".env.[environment]"})," file and write them to ",(0,t.jsx)(e.code,{children:"app.config.js"}),", while also writing those environment variables to iOS's Info.plist and Android's build.gradle using a plugin in the form of ",(0,t.jsx)(e.code,{children:"build-config-fields"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'expo: {\n  ios: {\n    infoPlist: {\n      // iOS Environment variables\n      ...configVars,\n    }\n  },\n  plugins: [\n    // Plugin to set Android environment variables\n    "./plugins/withAppBuildGradlePlugin.js",\n  ]\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Never commit sensitive environment variables to version control"}),"\n",(0,t.jsx)(e.li,{children:"Consider using a secure secrets management system for production environments"}),"\n",(0,t.jsx)(e.li,{children:"Use different values for development, staging, and production environments"}),"\n",(0,t.jsx)(e.li,{children:"Review environment variables regularly to ensure they're still needed"}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var o=i(6540);const t={},r=o.createContext(t);function a(n){const e=o.useContext(r);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);